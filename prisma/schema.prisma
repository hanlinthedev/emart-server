// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String     @id @unique @default(uuid())
  email     String     @unique
  name      String?
  avatar    String?
  createdAt DateTime   @default(now())
  password  String
  isAdmin   Boolean    @default(false)
  reviews   Review[]
  products  Product[]
  cartItem  CartItem[]
  orders    Order[]
}

model Product {
  id          String     @id @unique @default(uuid())
  name        String
  description String
  price       Float
  image       String
  category    Category?  @relation(fields: [categoryId], references: [id])
  categoryId  String?
  stock       Int
  rating      Float?
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  reviews     Review[]
  views       Int        @default(0)
  cartItem    CartItem[]
  createdAt   DateTime   @default(now())
}

model Order {
  id          String     @id @unique @default(uuid())
  orderNumber String     @unique @default(uuid())
  paymentType String     @default("cash")
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  cartItem    CartItem[]
  total       Float
  status      String     @default("pending")
  createdAt   DateTime   @default(now())
}

model CartItem {
  id         String   @id @unique @default(uuid())
  quantity   Int
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  subTotal   Float
  order      Order?   @relation(fields: [orderId], references: [id])
  orderId    String?
  checkedOut Boolean  @default(false)
  createdAt  DateTime @default(now())
}

model Category {
  id        String    @id @unique @default(uuid())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
}

model Review {
  id        String   @id @unique @default(uuid())
  comment   String
  rating    Float
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}
